---
import { Icon } from 'astro-icon/components';

interface GithubRepo {
    name: string;
    description: string;
    html_url: string;
    topics: string[];
    stargazers_count: number;
    languages_url: string;
}

interface GithubStats {
    totalStars: number;
    totalRepos: number;
    languages: {
        name: string;
        count: number;
        color: string;
    }[];
}

interface Props {
    name: string;
    github: string;
    discord: string; 
    description: string;
    bio: string;
    skills: string[];
    profileImage?: string;
}

const { 
    name, 
    github, 
    discord, 
    description, 
    bio, 
    skills, 
    profileImage,
} = Astro.props;

// Extract username from GitHub URL
const githubUsername = github.split('/').pop();

// Add this near the top of the component logic
const GITHUB_TOKEN = import.meta.env.GITHUB_TOKEN;
const headers = GITHUB_TOKEN ? {
    Authorization: `token ${GITHUB_TOKEN}`,
    Accept: 'application/vnd.github.v3+json',
} : {};

// Modify the fetch calls to use authentication
let allRepos: GithubRepo[] = [];
try {
    const response = await fetch(
        `https://api.github.com/users/${githubUsername}/repos?per_page=100`, 
        { headers }
    );
    if (!response.ok) {
        console.error(`GitHub API error: ${response.status} ${response.statusText}`);
        allRepos = [];
    } else {
        allRepos = await response.json();
    }
} catch (error) {
    console.error('Error fetching GitHub repos:', error);
    allRepos = [];
}

// Update the languages fetch to use authentication
const reposWithLanguages = await Promise.all(
    allRepos.map(async (repo) => {
        try {
            const langResponse = await fetch(repo.languages_url, { headers });
            if (!langResponse.ok) {
                return {
                    ...repo,
                    languages: []
                };
            }
            const languages = await langResponse.json();
            return {
                ...repo,
                languages: Object.keys(languages)
            };
        } catch (error) {
            console.error(`Error fetching languages for ${repo.name}:`, error);
            return {
                ...repo,
                languages: []
            };
        }
    })
);

const sortedRepos = reposWithLanguages
    .sort((a, b) => b.stargazers_count - a.stargazers_count);

// Fetch repository stats
const stats: GithubStats = {
    totalStars: 0,
    totalRepos: 0,
    languages: []
};

// Calculate total stars and collect all languages
const languageMap = new Map<string, { count: number; color: string }>();
const languageColors = {
    "C++": "#f34b7d",
    "Python": "#3572A5",
    "Go": "#00ADD8",
    "JavaScript": "#f1e05a",
    "TypeScript": "#2b7489",
    "PHP": "#4F5D95",
    "HTML": "#e34c26",
    "CSS": "#563d7c",
    // Add more as needed
};

reposWithLanguages.forEach(repo => {
    stats.totalStars += repo.stargazers_count;
    repo.languages.forEach(lang => {
        const current = languageMap.get(lang) || { count: 0, color: languageColors[lang] || '#666' };
        languageMap.set(lang, {
            count: current.count + 1,
            color: current.color
        });
    });
});

stats.totalRepos = reposWithLanguages.length;
stats.languages = Array.from(languageMap.entries())
    .map(([name, { count, color }]) => ({ name, count, color }))
    .sort((a, b) => b.count - a.count)
    .slice(0, 6); // Show top 6 languages

const defaultProfileIcon = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
    <circle cx="12" cy="7" r="4"></circle>
</svg>
`;
---

<li class="profile-card">
    <div class="card-header">
        {profileImage ? (
            <img src={profileImage} alt={`${name}'s profile picture`} class="profile-icon" />
        ) : (
            <Fragment set:html={defaultProfileIcon} class="profile-icon" />
        )}
        <div class="header-content">
            <h2>{name}</h2>
            <p class="tagline"><em>{description}</em></p>
        </div>
    </div>

    <section class="bio">
        <h3>About Me</h3>
        <p>{bio}</p>
    </section>

    <section class="github-stats">
        <h3>GitHub Stats</h3>
        {stats.totalRepos > 0 ? (
            <>
                <div class="stats-grid">
                    <div class="stat-item">
                        <span class="stat-value">{stats.totalStars}</span>
                        <span class="stat-label">Total Stars</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value">{stats.totalRepos}</span>
                        <span class="stat-label">Repositories</span>
                    </div>
                </div>
                <div class="languages-section">
                    <h4>Most Used Languages</h4>
                    <div class="language-bars">
                        {stats.languages.map(lang => (
                            <div class="language-bar-wrapper">
                                <div class="language-info">
                                    <span class="language-name">
                                        <span class="language-dot" style={`background-color: ${lang.color}`}></span>
                                        {lang.name}
                                    </span>
                                    <span class="language-count">{lang.count} repos</span>
                                </div>
                                <div class="language-bar-bg">
                                    <div 
                                        class="language-bar" 
                                        style={`width: ${(lang.count / stats.totalRepos * 100)}%; background-color: ${lang.color}`}>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </>
        ) : (
            <p class="error-message">
                Unable to fetch GitHub stats at the moment. Please try again later.
            </p>
        )}
    </section>

    {sortedRepos.length > 0 && (
        <section class="projects">
            <h3>Projects</h3>
            <ul>
                {sortedRepos.map(repo => (
                    <a href={repo.html_url} target="_blank" rel="noopener noreferrer" class="project-link">
                        <li class="project-item">
                            <div class="project-header">
                                <h4>{repo.name}</h4>
                                <span class="stars">
                                    <Icon name="star" size={14} />
                                    {repo.stargazers_count}
                                </span>
                            </div>
                            <p>{repo.description || 'No description available'}</p>
                            <div class="project-technologies">
                                {repo.languages?.map(lang => (
                                    <span class="tech-tag primary">{lang}</span>
                                ))}
                                {repo.topics?.map(tech => (
                                    <span class="tech-tag">{tech}</span>
                                ))}
                            </div>
                        </li>
                    </a>
                ))}
            </ul>
        </section>
    )}    

    <div class="profile-links">
        <a href={discord} target="_blank" rel="noopener noreferrer" class="profile-link" aria-label={`Discord profile of ${name}`}>
            <Icon name="discord" />
        </a>
        <a href={github} target="_blank" rel="noopener noreferrer" class="profile-link" aria-label={`GitHub profile of ${name}`}>
            <Icon name="github" />
        </a>
    </div>
</li>

<style>
    p {
        margin: 0;
        font-size: 1rem;
    }
    h2 {
        margin: 0;
        font-size: 1.8rem;
        color: var(--normal);
        transition: all 0.3s ease;
    }
    h2:hover {
        transform: translateY(-2px);
    }
    h3 {
        margin-top: 0;
        color: var(--normal);
        border-bottom: 2px solid var(--accent);
        padding-bottom: 0.5rem;
    }
    section {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
    }
    .profile-card {
        list-style: none;
        position: relative;
        display: flex;
        flex-direction: column;
        padding: 1.5rem;
        background: var(--back-ground);
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
        color: #ecf0f1;
        gap: 1rem;
    }
    .project-title {
        text-decoration: none;
        color: inherit;
    }
    .card-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }
    .header-content {
        display: flex;
        flex-direction: column;
    }
    .profile-icon {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        object-fit: cover;
        background: rgba(255, 255, 255, 0.1);
        border: 4px solid var(--accent);
        transition: all 1s ease-out;
    }
    .profile-icon:hover {
        transform: rotate(360deg);
    }
    .tagline {
        margin: 0.5rem 0 0;
        font-size: 1rem;
        color: rgba(255, 255, 255, 0.7);
    }
    .skills {
        list-style: none;
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin: 0;
        padding: 0;
        justify-content: center;
    }
    .skills li {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.3rem;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 4px;
        padding: 0.3rem 0.5rem;
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.9);
        transition: all 0.3s ease;
        cursor: default;
        width: calc((100% - 1.5rem) / 4);
        text-align: center; 
        box-sizing: border-box;
    }
    .skills li:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: translateY(-3px);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        color: var(--normal);
    }
    @media (max-width: 768px) {
        .skills li {
            width: calc((100% - 1rem) / 3);
        }
    }

    @media (max-width: 480px) {
        .skills li {
            width: calc((100% - 0.5rem) / 2);
        }
    }
    .projects ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }
    .project-item {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 6px;
        padding: 1rem;
        margin-bottom: 0.5rem;
        transition: box-shadow 0.2s ease;
    }
    .project-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
    }
    .project-header h4 {
        margin: 0;
        color: var(--normal);
    }
    .project-link {
        text-decoration: none;
        color: inherit;
        display: block;
        transition: transform 0.2s ease;
    }
    .project-link:hover {
        transform: translateY(-2px);
    }
    .project-technologies {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }
    .tech-tag {
        background: var(--back-ground);
        color: var(--normal);
        padding: 0.2rem 0.5rem;
        border-radius: 4px;
        font-size: 0.8rem;
        transition: all 0.3s ease;
    }
    .tech-tag:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: translateY(-3px);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        color: var(--normal);
    }
    .profile-links {
        display: flex;
        gap: 0.5rem;
        position: absolute;
        top: 1rem;
        right: 1rem;
    }
    .profile-link {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 36px;
        height: 36px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 50%;
        transition: all 0.3s ease;
    }
    .profile-link:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: scale(1.1);
    }
    .profile-link svg {
        width: 22px;
        height: 22px;
        fill: white;
        transition: fill 0.3s ease;
    }
    .profile-link:hover svg {
        fill: var(--normal);
    }
    .stars {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.7);
        display: flex;
        align-items: center;
        gap: 0.2rem;
    }

    .stars [data-icon] {
        opacity: 0.8;
        width: 14px;
        height: 14px;
    }

    .tech-tag.primary {
        background: rgba(255, 255, 255, 0.15);
        font-weight: 500;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .project-link:hover .project-item {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .github-stats {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 8px;
        padding: 1.5rem;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .stat-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.03);
        border-radius: 6px;
        transition: transform 0.2s ease;
    }

    .stat-item:hover {
        transform: translateY(-2px);
    }

    .stat-value {
        font-size: 1.8rem;
        font-weight: bold;
        color: var(--normal);
    }

    .stat-label {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.7);
        margin-top: 0.3rem;
    }

    .languages-section {
        margin-top: 1rem;
    }

    .languages-section h4 {
        color: var(--normal);
        margin: 0 0 1rem 0;
        font-size: 1.1rem;
    }

    .language-bars {
        display: flex;
        flex-direction: column;
        gap: 0.8rem;
    }

    .language-bar-wrapper {
        display: flex;
        flex-direction: column;
        gap: 0.3rem;
    }

    .language-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.9rem;
    }

    .language-name {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .language-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        display: inline-block;
    }

    .language-count {
        color: rgba(255, 255, 255, 0.6);
        font-size: 0.8rem;
    }

    .language-bar-bg {
        height: 4px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 2px;
        overflow: hidden;
    }

    .language-bar {
        height: 100%;
        border-radius: 2px;
        transition: width 0.3s ease;
    }

    .error-message {
        text-align: center;
        color: rgba(255, 255, 255, 0.7);
        padding: 1rem;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 6px;
    }
</style>
---
import { Icon } from 'astro-icon/components';

interface Props {
    github: string;
    discord: string; 
    description: string;
    bio: string;
}

interface LanguageStats {
    name: string;
    count: string;
    color: string;
}

const { 
    github, 
    discord, 
    description, 
    bio, 
} = Astro.props;

const githubUsername = github.split('/').pop();

const GITHUB_TOKEN = import.meta.env.GITHUB_TOKEN;
const headers = GITHUB_TOKEN ? {
    Authorization: `Bearer ${GITHUB_TOKEN}`,
    Accept: 'application/vnd.github.v3+json',
} : {};

const [userResponse, reposResponse] = await Promise.all([
    fetch(`https://api.github.com/users/${githubUsername}`, { headers }),
    fetch(`https://api.github.com/users/${githubUsername}/repos?per_page=100&sort=updated`, { headers })
]);

const userData = userResponse.ok ? await userResponse.json() : null;
const repos = reposResponse.ok ? await reposResponse.json() : [];

const repoLanguages = await Promise.all(
    repos.map(async (repo) => {
        const langResponse = await fetch(repo.languages_url, { headers });
        return langResponse.ok ? await langResponse.json() : {};
    })
);

const languageTotals = repoLanguages.reduce((acc: Record<string, number>, languages) => {
    Object.entries(languages).forEach(([lang, bytes]) => {
        acc[lang] = (acc[lang] || 0) + Number(bytes);
    });
    return acc;
}, {});

const languageColors = {
    "C++": "#f34b7d",
    "Python": "#3572A5",
    "Go": "#00ADD8",
    "JavaScript": "#f1e05a",
    "TypeScript": "#2b7489",
    "PHP": "#4F5D95",
    "HTML": "#e34c26",
    "CSS": "#563d7c",
    "Rust": "#dea584",
    "C#": "#178600",
    "Assembly": "#6E4C13"
};

const processedRepos = repos.map(repo => ({
    name: repo.name,
    description: repo.description,
    html_url: repo.html_url,
    stargazers_count: repo.stargazers_count,
    language: repo.language,
    topics: repo.topics || []
}));

const totalRepos = processedRepos.length;

const languageStats = Object.entries(languageTotals)
    .map(([name, bytes]) => {
        const totalBytes = Object.values(languageTotals).reduce((a, b) => Number(a) + Number(b), 0);
        const percentage = (Number(bytes) / Number(totalBytes)) * 100;
        return {
            name,
            count: `${percentage < 0.1 ? '< 0.1' : percentage.toFixed(1)}%`,
            color: languageColors[name] || '#666'
        };
    })
    .sort((a, b) => {
        const aNum = Number(a.count.replace(/[<%]/g, ''));
        const bNum = Number(b.count.replace(/[<%]/g, ''));
        return bNum - aNum;
    })
    .slice(0, 10);

    const stats = {
    totalStars: processedRepos.reduce((sum, repo) => sum + repo.stargazers_count, 0),
    totalRepos,
    languages: languageStats
};


const sortedRepos = processedRepos
    .sort((a, b) => b.stargazers_count - a.stargazers_count)
    .slice(0, 6);
---

<li class="profile-card">
    <div class="card-header">
        <img 
            src={userData?.avatar_url} 
            alt={`${userData?.name}'s profile picture`} 
            class="profile-icon" 
        />
        <div class="header-content">
            <h2>{userData?.name || githubUsername}</h2>
            <p class="tagline"><em>{description}</em></p>
        </div>
    </div>

    <section class="bio">
        <h3>About Me</h3>
        <p>{bio}</p>
    </section>

    <section class="github-stats">
        <h3>GitHub Stats</h3>
        {stats.totalRepos > 0 ? (
            <>
                <div class="stats-grid">
                    <div class="stat-item">
                        <span class="stat-value">{stats.totalStars}</span>
                        <span class="stat-label">Total Stars</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value">{stats.totalRepos}</span>
                        <span class="stat-label">Repositories</span>
                    </div>
                </div>
                <div class="languages-section">
                    <h4>Used Languages</h4>
                    <div class="language-list">
                        {stats.languages.map(lang => (
                            <div class="language-item">
                                <span class="language-dot" style={`background-color: ${lang.color}`}></span>
                                {lang.name}
                            </div>
                        ))}
                    </div>
                </div>
            </>
        ) : (
            <p class="error-message">
                Unable to fetch GitHub stats at the moment. Please try again later.
            </p>
        )}
    </section>

    {sortedRepos.length > 0 && (
        <section class="projects">
            <h3>Projects</h3>
            <ul>
                {sortedRepos.map(repo => (
                    <a href={repo.html_url} target="_blank" rel="noopener noreferrer" class="project-link">
                        <li class="project-item">
                            <div class="project-header">
                                <h4>{repo.name}</h4>
                                <span class="stars">
                                    <Icon name="star" size={14} />
                                    {repo.stargazers_count}
                                </span>
                            </div>
                            <p>{repo.description || 'No description available'}</p>
                            <div class="project-technologies">
                                {repo.topics?.map(tech => (
                                    <span class="tech-tag">{tech}</span>
                                ))}
                            </div>
                        </li>
                    </a>
                ))}
            </ul>
        </section>
    )}    

    <div class="profile-links">
        <a href={discord} target="_blank" rel="noopener noreferrer" class="profile-link" aria-label={`Discord profile of ${userData?.name || githubUsername}`}>
            <Icon name="discord" />
        </a>
        <a href={github} target="_blank" rel="noopener noreferrer" class="profile-link" aria-label={`GitHub profile of ${userData?.name || githubUsername}`}>
            <Icon name="github" />
        </a>
    </div>
</li>

<style>
    html {
        scroll-behavior: smooth;
    }
    p {
        margin: 0;
        font-size: 1rem;
    }
    h2 {
        margin: 0;
        font-size: 1.8rem;
        color: var(--normal);
        transition: all 0.3s ease;
    }
    h2:hover {
        transform: translateY(-2px);
    }
    h3 {
        margin-top: 0;
        color: var(--normal);
        border-bottom: 2px solid var(--accent);
        padding-bottom: 0.5rem;
    }
    section {
        background: rgba(255, 255, 255, 0.03);
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        border: 1px solid rgba(255, 255, 255, 0.05);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    section:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }
    .profile-card {
        list-style: none;
        position: relative;
        display: flex;
        flex-direction: column;
        padding: 1.5rem;
        background: rgba(2, 2, 2, 0.7);
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        transition: all 0.3s ease;
        color: #ecf0f1;
        gap: 1rem;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    .profile-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 2px;
        background: linear-gradient(90deg, transparent, var(--normal), transparent);
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    .profile-card:hover::before {
        opacity: 0.5;
    }
    .project-title {
        text-decoration: none;
        color: inherit;
    }
    .card-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }
    .header-content {
        display: flex;
        flex-direction: column;
    }
    .profile-icon {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        object-fit: cover;
        background: rgba(255, 255, 255, 0.1);
        border: 4px solid var(--accent);
        transition: all 1s ease-out;
    }
    .profile-icon:hover {
        transform: rotate(360deg);
    }
    .tagline {
        margin: 0.5rem 0 0;
        font-size: 1rem;
        color: rgba(255, 255, 255, 0.7);
    }
    .skills {
        list-style: none;
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin: 0;
        padding: 0;
        justify-content: center;
    }
    .skills li {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.3rem;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 4px;
        padding: 0.3rem 0.5rem;
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.9);
        transition: all 0.3s ease;
        cursor: default;
        width: calc((100% - 1.5rem) / 4);
        text-align: center; 
        box-sizing: border-box;
    }
    .skills li:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: translateY(-3px);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        color: var(--normal);
    }
    @media (max-width: 768px) {
        .skills li {
            width: calc((100% - 1rem) / 3);
        }
    }

    @media (max-width: 480px) {
        .skills li {
            width: calc((100% - 0.5rem) / 2);
        }
    }
    .projects ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }
    .project-item {
        background: rgba(255, 255, 255, 0.03);
        border-radius: 6px;
        padding: 1rem;
        margin-bottom: 0.5rem;
        transition: all 0.2s ease;
        border: 1px solid rgba(255, 255, 255, 0.05);
        position: relative;
        overflow: hidden;
    }
    .project-item::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(
            120deg,
            transparent,
            rgba(255, 255, 255, 0.05),
            transparent
        );
        transform: translateX(-100%);
        transition: transform 0.5s ease;
    }
    .project-item:hover::after {
        transform: translateX(100%);
    }
    .project-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
    }
    .project-header h4 {
        margin: 0;
        color: var(--normal);
    }
    .project-link {
        text-decoration: none;
        color: inherit;
        display: block;
        transition: transform 0.2s ease;
    }
    .project-link:hover {
        transform: translateY(-2px);
    }
    .project-technologies {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }
    .tech-tag {
        background: var(--back-ground);
        color: var(--normal);
        padding: 0.2rem 0.5rem;
        border-radius: 4px;
        font-size: 0.8rem;
        transition: all 0.3s ease;
    }
    .tech-tag:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: translateY(-3px);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        color: var(--normal);
    }
    .profile-links {
        display: flex;
        gap: 0.5rem;
        position: absolute;
        top: 1rem;
        right: 1rem;
    }
    .profile-link {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 36px;
        height: 36px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 50%;
        transition: all 0.3s ease;
    }
    .profile-link:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: scale(1.1);
    }
    .profile-link svg {
        width: 22px;
        height: 22px;
        fill: white;
        transition: fill 0.3s ease;
    }
    .profile-link:hover svg {
        fill: var(--normal);
    }
    .stars {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.7);
        display: flex;
        align-items: center;
        gap: 0.2rem;
    }

    .stars [data-icon] {
        opacity: 0.8;
        width: 14px;
        height: 14px;
    }

    .tech-tag.primary {
        background: rgba(255, 255, 255, 0.15);
        font-weight: 500;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .project-link:hover .project-item {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .github-stats {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 8px;
        padding: 1.5rem;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .stat-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.03);
        border-radius: 6px;
        transition: transform 0.2s ease;
    }

    .stat-item:hover {
        transform: translateY(-2px);
    }

    .stat-value {
        font-size: 1.8rem;
        font-weight: bold;
        color: var(--normal);
    }

    .stat-label {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.7);
        margin-top: 0.3rem;
    }

    .languages-section {
        margin-top: 1rem;
    }

    .languages-section h4 {
        color: var(--normal);
        margin: 0 0 1rem 0;
        font-size: 1.1rem;
    }

    .language-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.8rem;
        padding: 0.5rem;
    }

    .language-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        background: rgba(255, 255, 255, 0.05);
        padding: 0.4rem 0.8rem;
        border-radius: 4px;
        font-size: 0.9rem;
    }

    .language-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        display: inline-block;
    }

    .error-message {
        text-align: center;
        color: rgba(255, 255, 255, 0.7);
        padding: 1rem;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 6px;
    }
</style>

<script>
    if (typeof window !== 'undefined') {
        window.history.scrollRestoration = 'manual';
    }
</script>